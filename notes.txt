GENERAL

    Change of plans? Create a way to query object subtree. Need to make an object tree
    out of InstanceDumps so they point to each other through references, not
    ID fields, then create queries that can traverse the tree csumming up the bytes of
    matching objects. E.g. all objects whose .name field starts with "T" or
    is alphabetically between "aardwark" and "elephant.

    The "EntireHPROF" object (see below) will have a HashMap<Tag, SomeContainer<Entity>>
    to store entities by type. Usually, SomeContainer can be a hash map
    by some IDField, like objectId. The default case can do that.
    (Case by exact entity class)

    Some exceptional cases may be req-d, most notably, in the case of
    heap dumps.

    HeapDumpSegment will probably get a nextEntity reference.
    It will be "EntireHPROF"'s responsibility to organize these.

TODO

    - IDFieldConverters : IDFieldLongReadConverter, IDFieldIntWriteCOnverter, etc.
      Can we register them dynamically? (l8r, first just Longs)

    - Consider making HPROF store an abstract class (Interface, after all?)
      Some methods in HPROFMemStore should have a prototype in the interface.
      (getClassDumps(), etc). That interface needs to more closely mimic
      the HPROFMemStore. Should have getClassDump(IDField), getInstDump(IDField),
      etc.

    - HPROFStore - missing methods for StackFrames, Theads, ArrayDumps? Other HasId's?

    - In MemStore - store by Tag, not class?
    - What if multiple dumps?
    - So, we added a couple of .hprofs for testing. Do we add all of them?
    - l is no name for a DataStreamWrapper!
    - hashcodez? serializable?
    - getnInstanceFields -- rename
    - BasTypeTag.readEntryValue = refactor for an DiS
    - HPROFInStreamLoader - use mapped files (FileChannel, ByteBuffer)
    - mess with the throwing classcasts in InstanceLayout/HPROFMemoryStore

    - We are using those readInt's to read unsigned four bytes, resulting
      in a wrong value. (sometimes negative)

    - Refactor entries in ClassDump?

    - logging support (http://docs.spring.io/autorepo/docs/spring-data-mongodb/1.4.3.RELEASE/reference/html/ )
      chap.8.

    - fix pom.xml -- changing loader implementation.
    - exception handling for malformed HPROFS?
       (e.g. nFrames != number of actual frame ids that follow)
    - test serialization?

    - InstanceDump may need to be fleshed out after all
      the field classes are loaded.


DONE

    - Separate the InputStream wrapper from the loader class.

    - hprofHeaderInfo

    - readXXX() functions return HPRofMainEntry(). Why not void?

    - Need object for entire HPROF. Cannot be combined with loader.
      (will keep all the object, indexed by IDField, which will
       need hashcode).

    - add id class ????

    - Finalize HeapDump and HeapDumpSegment. They need references
      to next HeapDumpSegment or HeapDumpEnd. These should NOT
      automatically kickstart loading of the next HeapDumpSegment
      or HeapDumpEnd tag.
